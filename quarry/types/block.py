import json
import math
import os.path
import shutil
import subprocess
import tempfile


class OpaqueBlockMap(object):
    """
    Block map that passes IDs through unchanged. This is the default.
    """

    def __init__(self, max_bits):
        self.max_bits = max_bits

    def encode(self, obj):
        return obj

    def decode(self, val):
        return val


class BitShiftBlockMap(object):
    """
    Block map implementing the Minecraft 1.7 - 1.12 bit-shift format. Decodes
    to a ``(block_id, metadata)`` pair.
    """

    def __init__(self):
        self.max_bits = 13

    def encode(self, obj):
        return (obj[0] << 4) | obj[1]

    def decode(self, val):
        return val >> 4, val & 0x0F


class LookupBlockMap(object):
    """
    Block map implementing a dictionary lookup, recommended for 1.13+. Decodes
    to a ``dict`` where the only guaranteed key is ``u'name'``. Use the
    ``from_jar()`` or ``from_json()`` class methods to load data from the
    official server.
    """


    def __init__(self, mapping):
        self.decode_mapping = mapping
        self.encode_mapping = {
            frozenset(value.items()): key
            for key, value in mapping.items()}
        self.max_bits = int(math.ceil(math.log(max(mapping.keys()), 2)))

    def encode(self, obj):
        return self.encode_mapping[frozenset(obj.items())]

    def decode(self, val):
        return dict(self.decode_mapping[obj])

    @classmethod
    def from_jar(cls, path):
        """
        Create a ``LookupBlockMap`` from a Minecraft server jar file. This
        method generates a JSON file by running the Minecraft server like so::

            java -cp minecraft_server.jar net.minecraft.data.Main --reports

        It then feeds the generated JSON file to ``from_json()``.
        """
        temp_path = tempfile.mkdtemp('-quarry')
        jar_path = os.path.join(temp_path, "minecraft_server.jar")
        eula_path = os.path.join(temp_path, "eula.txt")
        blocks_path = os.path.join(temp_path, "generated", "reports",
                                   "blocks.json")

        # Copy server
        shutil.copy(path, jar_path)

        # Accept EULA
        with open(eula_path, "w") as fd:
            fd.write("eula=true\n")

        # Export blocks
        subprocess.check_call(
            ["java", "-cp", jar_path, "net.minecraft.data.Main", "--reports"],
            cwd=temp_path)

        # Load data
        return cls.from_json(blocks_path)

    @classmethod
    def from_json(cls, path):
        """
        Create a ``LookupBlockMap`` from a JSON file generated by the official
        server.
        """
        with open(path) as fd:
            data = json.load(fd)

        mapping = {}
        for name, obj in data.items():
            for state in obj['states']:
                properties = state.get("properties", {})
                properties[u'name'] = name
                mapping[state['id']] = properties

        return cls(mapping)